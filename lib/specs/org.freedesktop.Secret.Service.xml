<!DOCTYPE node PUBLIC "-//freedesktop//DTD D-BUS Object Introspection 1.0//EN"
    "http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd">
<!--
     * ======================================================================================
     * SERVICE INTERFACE
     *
    -->
<node name="/org/freedesktop/Secrets">

    <interface name="org.freedesktop.Secret.Service">

        <!-- The Secret Service manages all the sessions and collections. -->

        <property name="Collections" type="ao" access="read">
            <!--The
            object paths of all collections (ie: keyrings)-->
        </property>

        <method name="OpenSession">
            <!--Open
            a unique session for the caller application.-->
            <arg name="algorithm" type="s" direction="in">
                <!--The
                algorithm the caller wishes to use.-->
            </arg>
            <arg name="input" type="v" direction="in">
                <!--Input
                arguments for the algorithm.-->
            </arg>
            <arg name="output" type="v" direction="out">
                <!--Output
                of the session algorithm negotiation.-->
            </arg>
            <arg name="result" type="o" direction="out">
                <!--The
                object path of the session, if session was created.-->
            </arg>
        </method>

        <method name="CreateCollection">
            <!--Create
            a new collection with the specified properties.-->
            <arg name="properties" type="a{sv}" direction="in">
                <!-- xmlns:docbook="http://docbook.org/ns/docbook"
                <para> Properties for the new collection. This allows setting the new collection's
                    properties upon its creation. All READWRITE properties are useable. Specify the
                    property names in full interface.Property form. <example>
                        <title>Example for properties</title>
                        <programlisting>
<![CDATA[
properties = { "org.freedesktop.Secret.Collection.Label": "MyCollection" }
]]>
                                </programlisting>
                    </example>
                </para>
                -->
            </arg>
            <arg name="alias" type="s" direction="in">
                <!-- xmlns:docbook="http://docbook.org/ns/docbook">
                <para> If creating this connection for a well known alias then a string like <literal>
                    default</literal>. If an collection with this well-known alias already exists,
                    then that collection will be returned instead of creating a new collection. Any
                    readwrite properties provided to this function will be set on the collection. </para>
                <para>
                    Set this to an empty string if the new collection should not be associated
                    with a
                    well known alias.
                </para>
                -->
            </arg>
            <arg name="collection" type="o" direction="out">
                <!--The
                new collection object, or '/' if prompting is necessary.-->
            </arg>
            <arg name="prompt" type="o" direction="out">
                <!--A
                prompt object if prompting is necessary, or '/' if no prompt was
                    needed.-->
            </arg>
        </method>

        <method name="SearchItems">
            <!--Find
            items in any collection.-->
            <arg name="attributes" type="a{ss}" direction="in">
                <!--Find
                secrets in any collection.-->
            </arg>
            <arg name="unlocked" type="ao" direction="out">
                <!--Items
                found.-->
            </arg>
            <arg name="locked" type="ao" direction="out">
                <!--Items
                found that require authentication.-->
            </arg>
        </method>

        <method name="Unlock">
            <!--Unlock
            the specified objects.-->
            <arg name="objects" type="ao" direction="in">
                <!--Objects
                to unlock.-->
            </arg>
            <arg name="unlocked" type="ao" direction="out">
                <!--Objects
                that were unlocked without a prompt.-->
            </arg>
            <arg name="prompt" type="o" direction="out">
                <!--A
                prompt object which can be used to unlock the remaining objects, or
                    the special value '/' when no prompt is necessary.-->
            </arg>
        </method>

        <method name="Lock">
            <!--Lock
            the items.-->
            <arg name="objects" type="ao" direction="in">
                <!--Objects
                to lock.-->
            </arg>
            <arg name="locked" type="ao" direction="out">
                <!--Objects
                that were locked without a prompt.-->
            </arg>
            <arg name="Prompt" type="o" direction="out">
                <!--A
                prompt to lock the objects, or the special value '/' when no prompt
                    is necessary.-->
            </arg>
        </method>

        <method name="GetSecrets">
            <!--Retrieve
            multiple secrets from different items.-->
            <arg name="items" type="ao" direction="in">
                <!--Items
                to get secrets for.-->
            </arg>
            <arg name="session" type="o" direction="in">
                <!--The
                session to use to encode the secrets.-->
            </arg>
            <arg name="secrets" type="a{o(oayays)}" direction="out">
                <!--Secrets
                for the items.-->
            </arg>
        </method>

        <method name="ReadAlias">
            <!--Get
            the collection with the given alias.-->
            <arg name="name" type='s' direction='in'>
                <!--An
                alias, such as 'default'.-->
            </arg>
            <arg name="collection" type='o' direction='out'>
                <!--The
                collection or the path '/' if no such collection exists.-->
            </arg>
        </method>

        <method name="SetAlias">
            <!--Setup
            a collection alias.-->
            <arg name="name" type='s' direction='in'>
                <!--An
                alias, such as 'default'.-->
            </arg>
            <arg name="collection" type='o' direction='in'>
                <!--
                    The collection to make the alias point to. To remove an alias use the special
                    value '/'.
                -->
            </arg>
        </method>

        <signal name="CollectionCreated">
            <!--A
            collection was created.-->
            <arg name="collection" type="o">
                <!--Collection
                that was created-->
            </arg>
        </signal>

        <signal name="CollectionDeleted">
            <!--A
            collection was deleted.-->
            <arg name="collection" type="o">
                <!--Collection
                that was deleted.-->
            </arg>
        </signal>

        <signal name="CollectionChanged">
            <!--A
            collection was changed.-->
            <arg name="collection" type="o">
                <!--Collection
                that was changed.-->
            </arg>
        </signal>

    </interface>

</node>
